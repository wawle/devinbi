name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER }} >> ~/.ssh/known_hosts

      - name: Deploy to Test or Prod
        env:
          BRANCH: ${{ github.ref_name }}
          SERVER: ${{ secrets.SERVER }}
          USER: ${{ secrets.USER }}
        run: |
          if [ "$BRANCH" == "dev" ]; then
            ssh $USER@$SERVER "
              cd /var/www/test/devinbi && \
              git pull origin dev && \

             # Build the Docker image (you can specify the exact tag)
              docker build -t devinbi_test:latest . && \

              # Run a new container in detached mode with a new name
              docker run -d -p 3001:3000 --name devinbi_test_new devinbi_test:latest && \

              # Check if the new container is running correctly
              docker ps -f name=devinbi_test_new --format '{{.Status}}' | grep 'Up' && \

              # Stop and remove the old container after verifying the new one is running
              docker stop devinbi_test && \
              docker rm devinbi_test && \

              # Rename the new container to the old container's name (for consistency)
              docker rename devinbi_test_new devinbi_test
            "
          elif [ "$BRANCH" == "main" ]; then
            ssh $USER@$SERVER "
              cd /var/www/prod/devinbi && \
              git pull origin main && \
              
              # Build the Docker image (you can specify the exact tag)
              docker build -t devinbi_prod:latest . && \

              # Run a new container in detached mode with a new name
              docker run -d -p 3000:3000 --name devinbi_prod_new devinbi_prod:latest && \

              # Check if the new container is running correctly
              docker ps -f name=devinbi_prod_new --format '{{.Status}}' | grep 'Up' && \

              # Stop and remove the old container after verifying the new one is running
              docker stop devinbi_prod && \
              docker rm devinbi_prod && \

              # Rename the new container to the old container's name (for consistency)
              docker rename devinbi_prod_new devinbi_prod
            "
          fi
